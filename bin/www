#!/usr/bin/env node

import app from '../app.js';
import http from 'http';
import debug from 'debug';
import { initializeDbSchema } from '../config/db.js';
import winstonLogger from '../utils/logger.js'; // or whatever logger you use
// import connectToDb and initializeDbSchema if you're using them

const logger = winstonLogger; // or `debug('appointment-booking-api:server')`
const log = debug('appointment-booking-api:server')

const port = normalizePort(process.env.PORT || '3050');
app.set('port', port);

const server = http.createServer(app); // Use the Express app!

const startServer = async () => {
  try {
    logger.info(`Attempting to start server on port ${port}`);
    
    await initializeDbSchema(); // initialize DB before starting server

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (error) {
    logger.error('Failed during server startup process:', error);
    process.exit(1);
  }
};

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  log(`Listening on  + ${bind}`);
  console.log(`ðŸš€ Server running at http://localhost:${port}/`);
}

// const startServer = async () => {
//   try {
//     logger.info(`Attempting to Start server on port ${port}`)
//     await connectToDb()
//     await initialzeDbSchema()
//     logger.info(`Starting server on port ${port}`)
//     server.listen(port);
//     server.on('error', onError);
//     server.on('listening', onListening);
//   } catch (error) {
//     logger.error('Failed during server startup process: ', error)
//     process.exit(1)
//   }
// }

startServer()
